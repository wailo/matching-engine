* System 
** Requirements:
 |-----+----------------------+-------------------------------------------------------------------|
 | ID# | Application          | Description                                                       |
 |-----+----------------------+-------------------------------------------------------------------|
 |   1 | Order Management API | Should Receive order requests from a client                       |
 |   2 | Order Management API | Should Matches/executes orders                                    |
 |   3 | Order Management API | Should Send order buy update to the owner of a buy order          |
 |   4 | Order Management API | Should Send order sell update to the owner of a sell order        |
 |   5 | Order Management API | Should Keep track of active orders                                |
 |   6 | Order Management API | Should Publish order book and public trades using Market Data API |
 |   7 | Order Management API | Publish Book should be sorted by price [requirement from email]   |
 |   8 | Contracts            | Orders are grouped by contracts, contract is a unique ID          |
 |   9 | Market Data API      | Should send order books to all subscribed clients                 |
 |  10 | Market Data API      | Should send public traders to all subscribed clients              |
 |  11 | Client               | Should send buy order requests to the Order Management API        |
 |  12 | Client               | Should send sell order requests to the Order Management API       |
 |  13 | Client               | Should handle data received from the Market Data API              |
 |-----+----------------------+-------------------------------------------------------------------|

** Sequence Diagram

  #+begin_src plantuml :file sd.txt :results output silent:
  ' skinparam monochrome true
  title Matching Engine  Sequence Diagram

  create MatchingEngine

  activate MatchingEngine
  [o-> MatchingEngine : create
  create orderManagement
  MatchingEngine -> orderManagement : creates
  create marketData
  MatchingEngine -> marketData : creates
  deactivate MatchingEngine


  [o-> MatchingEngine : addTrader
  activate MatchingEngine
  create Trader
  MatchingEngine -> Trader : creates
  <-MatchingEngine: return handle to trader
  deactivate MatchingEngine

  Trader -> orderManagement : createOrder
  activate orderManagement
  orderManagement -> Trader :
  deactivate orderManagement

  orderManagement -> orderManagement : matchOrders
  activate orderManagement
  orderManagement -> Trader : onOrderExcecution (if order is matched)
  orderManagement -> marketData : onPublicTrades 
  deactivate orderManagement
  activate marketData

  marketData -> Trader: onPublicTrades
  deactivate marketData
  #+end_src

  #+RESULTS:
  [[file:sd.txt]]

  #+INCLUDE: "sd.txt" src

** Activity Diagram

#+begin_src plantuml :file ad.txt :results output silent  :
:First Actor:
:Another\nactor: as Men2  
actor Men3
actor :Last actor: as Men4
#+end_src
#+INCLUDE: "ad.txt" src

* Building the solution
** Requirements
   * CMAKE 3.0
   * Clang C++14
   * BOOST unit test framework
** Steps
    From the project directory, execute the following commands:
    * cd build
    * cmake ..
    * make
    Running the unit tests
     make test

* Description
        Assumptions:
       * Orders matching is proiortiesed per price as following:
         1. Buy ordres with highest price got matched first.
         2. Sell orders with lowest price got matched first.
       * Modification and deletion of orders is not supported.
       * Price are treated in cents
* Misc
** Choice of container was based on answering the following questions:
     * Performance is very critical?
       Yes.
       
     * Sorting required?
       No, only min/max element must be the first item in the container.
    
     * Lookups required?
       No.
       
     * Insertions/deletions from the container.
       Objects are always appended at the back. No insertion happens in the middle of front of the container.
   
       
